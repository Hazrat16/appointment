name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - staging
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  NODE_VERSION: "18"

jobs:
  # Test and Build Job
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Backend Dependencies
        run: |
          cd backend
          npm ci

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      # - name: Run Backend Tests
      #   run: |
      #     cd backend
      #     npm test

      # - name: Run Frontend Tests
      #   run: |
      #     cd frontend
      #     npm test

      - name: Build Frontend
        run: |
          cd frontend
          npm run build

      - name: Check for linting errors
        run: |
          cd frontend
          npm run lint || true

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ secrets.PRODUCTION_DOMAIN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Production VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_VPS_HOST }}
          username: ${{ secrets.PRODUCTION_VPS_USERNAME }}
          key: ${{ secrets.PRODUCTION_VPS_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_VPS_PORT || 22 }}
          script: |
            set -e

            echo "üöÄ Starting deployment to production..."

            # Navigate to project directory
            cd /var/www/appointment

            # Create backup before deployment
            echo "üì¶ Creating backup..."
            bash deployment/manual/manual-backup.sh

            # Pull latest changes
            echo "üì• Pulling latest code..."
            git fetch origin
            git checkout main
            git pull origin main

            # Install backend dependencies
            echo "üì¶ Installing backend dependencies..."
            cd backend
            npm ci --production

            # Install frontend dependencies and build
            echo "üì¶ Installing frontend dependencies..."
            cd ../frontend
            npm ci --production

            echo "üî® Building frontend..."
            npm run build

            # Restart applications
            echo "üîÑ Restarting applications..."
            cd ..
            pm2 restart ecosystem.config.js --update-env

            # Wait for apps to start
            sleep 5

            # Health check
            echo "üè• Running health check..."
            curl -f http://localhost:5000/health || exit 1

            # Show status
            echo "üìä Application status:"
            pm2 status

            echo "‚úÖ Deployment completed successfully!"

      - name: Notify Success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "üåê Application URL: https://${{ secrets.PRODUCTION_DOMAIN }}"

      - name: Notify Failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Please check the logs and rollback if necessary."

  # Deploy to Staging (optional)
  deploy-staging:
    name: Deploy to Staging
    needs: test-and-build
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://${{ secrets.STAGING_DOMAIN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Staging VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_VPS_HOST }}
          username: ${{ secrets.STAGING_VPS_USERNAME }}
          key: ${{ secrets.STAGING_VPS_SSH_KEY }}
          port: ${{ secrets.STAGING_VPS_PORT || 22 }}
          script: |
            set -e
            cd /var/www/appointment-staging
            git fetch origin
            git checkout staging
            git pull origin staging
            cd backend && npm ci --production && cd ..
            cd frontend && npm ci --production && npm run build && cd ..
            pm2 restart ecosystem.config.js --update-env
            sleep 5
            curl -f http://localhost:5000/health || exit 1

      - name: Notify Success
        if: success()
        run: echo "‚úÖ Staging deployment successful!"
