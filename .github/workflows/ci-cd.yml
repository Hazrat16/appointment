name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - staging
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Backend Dependencies
        run: |
          cd backend
          npm ci
          
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci
          
      # Backend Security Audit
      - name: Backend Security Audit
        run: |
          cd backend
          echo "üîç Running security audit for backend..."
          npm audit --audit-level moderate || echo "‚ö†Ô∏è Security vulnerabilities found in backend"
          
      # Frontend Security Audit
      - name: Frontend Security Audit
        run: |
          cd frontend
          echo "üîç Running security audit for frontend..."
          npm audit --audit-level moderate || echo "‚ö†Ô∏è Security vulnerabilities found in frontend"
          
      # Backend Linting
      - name: Backend Linting
        run: |
          cd backend
          echo "üìù Running ESLint for backend..."
          npm run lint
          
      # Frontend Linting
      - name: Frontend Linting
        run: |
          cd frontend
          echo "üìù Running ESLint..."
          npm run lint
          
      # TypeScript Type Checking
      - name: TypeScript Type Check
        run: |
          cd frontend
          echo "üîç Running TypeScript type check..."
          npx tsc --noEmit
          
      # Check for console.log statements (code quality)
      - name: Check for Console Logs
        run: |
          echo "üîç Checking for console.log statements..."
          if grep -r "console\.log" frontend/src --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
            echo "‚ö†Ô∏è Found console.log statements - consider removing for production"
          else
            echo "‚úÖ No console.log statements found"
          fi
          
      # Check for TODO/FIXME comments
      - name: Check for TODO/FIXME Comments
        run: |
          echo "üìã Checking for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" frontend/src backend/src --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
            echo "üìù Found TODO/FIXME comments - review before merging"
          else
            echo "‚úÖ No TODO/FIXME comments found"
          fi
          
  # Build and Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Backend Dependencies
        run: |
          cd backend
          npm ci
          
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci
          
      # Backend Tests (if available)
      - name: Run Backend Tests
        run: |
          cd backend
          echo "üß™ Running backend tests..."
          if npm run test 2>/dev/null; then
            echo "‚úÖ Backend tests passed"
          else
            echo "‚ö†Ô∏è Backend tests not configured or failed"
          fi
          
      # Frontend Build
      - name: Build Frontend
        run: |
          cd frontend
          echo "üî® Building frontend..."
          npm run build
          echo "‚úÖ Frontend build successful"
          
      # Check build output
      - name: Verify Build Output
        run: |
          cd frontend
          echo "üìÅ Checking build output..."
          if [ -d ".next" ]; then
            echo "‚úÖ Build output directory exists"
            ls -la .next/
          else
            echo "‚ùå Build output directory missing"
            exit 1
          fi
          
      # Bundle size check (optional)
      - name: Check Bundle Size
        run: |
          cd frontend
          echo "üìä Checking bundle size..."
          if [ -d ".next/static" ]; then
            echo "Bundle size analysis:"
            find .next/static -name "*.js" -exec ls -lh {} \; | head -5
          fi
          
  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    needs: [code-quality, build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ secrets.PRODUCTION_DOMAIN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Deploy to Production VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_VPS_HOST }}
          username: ${{ secrets.PRODUCTION_VPS_USERNAME }}
          key: ${{ secrets.PRODUCTION_VPS_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_VPS_PORT || 22 }}
          script: |
            set -e
            
            echo "üöÄ Starting deployment to production..."
            
            # Navigate to project directory
            cd /var/www/appointment
            
            # Create backup before deployment
            echo "üì¶ Creating backup..."
            bash deployment/manual/manual-backup.sh
            
            # Pull latest changes
            echo "üì• Pulling latest code..."
            git fetch origin
            git checkout main
            git pull origin main
            
            # Install backend dependencies
            echo "üì¶ Installing backend dependencies..."
            cd backend
            npm ci --production
            
            # Install frontend dependencies and build
            echo "üì¶ Installing frontend dependencies..."
            cd ../frontend
            npm ci --production
            
            echo "üî® Building frontend..."
            npm run build
            
            # Restart applications
            echo "üîÑ Restarting applications..."
            cd ..
            pm2 restart ecosystem.config.js --update-env
            
            # Wait for apps to start
            sleep 5
            
            # Health check
            echo "üè• Running health check..."
            curl -f http://localhost:5000/health || exit 1
            
            # Show status
            echo "üìä Application status:"
            pm2 status
            
            echo "‚úÖ Deployment completed successfully!"
            
      - name: Notify Success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "üåê Application URL: https://${{ secrets.PRODUCTION_DOMAIN }}"
          
      - name: Notify Failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Please check the logs and rollback if necessary."
          
  # Deploy to Staging (optional)
  deploy-staging:
    name: Deploy to Staging
    needs: [code-quality, build-and-test]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://${{ secrets.STAGING_DOMAIN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Deploy to Staging VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_VPS_HOST }}
          username: ${{ secrets.STAGING_VPS_USERNAME }}
          key: ${{ secrets.STAGING_VPS_SSH_KEY }}
          port: ${{ secrets.STAGING_VPS_PORT || 22 }}
          script: |
            set -e
            cd /var/www/appointment-staging
            git fetch origin
            git checkout staging
            git pull origin staging
            cd backend && npm ci --production && cd ..
            cd frontend && npm ci --production && npm run build && cd ..
            pm2 restart ecosystem.config.js --update-env
            sleep 5
            curl -f http://localhost:5000/health || exit 1
            
      - name: Notify Success
        if: success()
        run: echo "‚úÖ Staging deployment successful!"

